name: 'publish'

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest' # for Arm based macs (M1 and above).
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest' # for Intel based macs.
            args: '--target x86_64-apple-darwin'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'pnpm' # Set this to npm, yarn or pnpm.

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable # Set this to dtolnay/rust-toolchain@nightly
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: install frontend dependencies
        # If you don't have `beforeBuildCommand` configured you may want to build your frontend here too.
        run: pnpm install # change this to npm or pnpm depending on which one you use.

      - name: Extract changelog for version
        id: changelog
        run: |
          VERSION=$(grep -m1 'version =' src-tauri/Cargo.toml | sed 's/.*"\([^"]*\)".*/\1/')
          echo "Extracting changelog for version $VERSION"
          
          # Extract changelog content between version headers
          CHANGELOG_CONTENT=$(awk -v version="$VERSION" '
            BEGIN { in_section = 0; found = 0 }
            /^## \[/ {
              if ($0 ~ "\\[" version "\\]") {
                in_section = 1
                found = 1
                next
              } else if (in_section) {
                exit
              }
            }
            in_section { 
              # Skip empty lines at the start
              if (NF > 0 || started) {
                started = 1
                print $0
              }
            }
            END { if (!found) print "No changelog found for version " version }
          ' CHANGELOG.md)
          
          # Save to file for multiline output
          echo "$CHANGELOG_CONTENT" > changelog_content.txt
          echo "CHANGELOG_CONTENT<<EOF" >> $GITHUB_ENV
          cat changelog_content.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          # macOS signing
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
          # Optional: for notarization (recommended for distribution)
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        with:
          tagName: v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: 'v__VERSION__'
          releaseBody: ${{ env.CHANGELOG_CONTENT }}
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}
